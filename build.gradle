plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "com.github.sherter.google-java-format" version '0.9'
}

version = file('src/main/resources/VERSION').text.trim()

repositories {
    mavenCentral()
}

sourceSets {
    integTest
}

configurations {
    bundle
    implementation.extendsFrom bundle
    runtimeClasspath.extendsFrom bundle
    integTestCompile.extendsFrom testCompile
}

dependencies {
    implementation gradleApi()
    bundle(project(':format')) {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    bundle              'com.google.guava:guava:33.0.0-jre'
    bundle              'com.google.dagger:dagger:2.50'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.50'
    annotationProcessor 'com.google.auto.value:auto-value:1.10.4'
    compileOnly         'com.google.auto.value:auto-value-annotations:1.10.4'

    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation 'com.google.jimfs:jimfs:1.3.0'

    integTestImplementation project(':test')
    integTestImplementation gradleTestKit()
    integTestImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    integTestImplementation sourceSets.main.output
}

def integTestGradleVersion = System.getenv('GRADLE_VERSION') ?: '8.5'

tasks.register("integrationTest", Test) {
    dependsOn publishToMavenLocal
    group 'Verification'
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    systemProperty 'GRADLE_VERSION', integTestGradleVersion
    reports.html.destination = new File(reportsDir, 'integrationTest' + File.separator + integTestGradleVersion)
    mustRunAfter tasks.named("test")
}

tasks.named("check").configure {
    dependsOn integrationTest
}


tasks.named('shadowJar').configure {
  archiveClassifier = null // necessary for com.gradle.plugin-publish to pick this artifact up
  configurations = [project.configurations.bundle]
  relocate('dagger', 'com.github.sherter.googlejavaformat.dagger')
  relocate('com.google.common', 'com.github.sherter.googlejavaformatgradleplugin.com.google.common')
  exclude('META-INF/maven/**/*')
}

// removes the dependsOn relation between "publishPlugins" and "jar" and forces
// the correct (the shadowed) artifact to be uploaded to the plugin portal
configurations.archives.artifacts.clear()
artifacts {
  archives tasks.named('shadowJar')
}

gradlePlugin {
    website = 'https://github.com/sherter/google-java-format-gradle-plugin'
    vcsUrl = 'https://github.com/sherter/google-java-format-gradle-plugin.git'
    description = 'Format your Java source files with google-java-format'

    plugins {
        googleJavaFormatGradlePlugin {
            id = 'com.github.sherter.google-java-format'
            implementationClass = 'com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormatPlugin'
            displayName = 'google-java-format gradle plugin'
            tags = ['java', 'format', 'style']
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.github.sherter.googlejavaformatgradleplugin'
            artifactId 'google-java-format-gradle-plugin'

            project.shadow.component(it)
        }
    }
    if (version.endsWith('-SNAPSHOT')) {
        repositories {
            maven {
                name = 'SonatypeSnapshot'
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    username System.env.SONATYPE_SNAPSHOTS_USERNAME
                    password System.env.SONATYPE_SNAPSHOTS_PASSWORD
                }
            }
        }
    }
}
